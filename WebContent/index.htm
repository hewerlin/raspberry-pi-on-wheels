<!DOCTYPE html>
<html>
<head>
<title>PiBot Camera Control</title>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1" />
<!-- <script src="numeric-1.2.6.js"></script> //-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.js" integrity="sha256-Xcq6IBb9I3CR46F7DcJy+yHw4rFddij5WgrQzUzfQCA=" crossorigin="anonymous"></script>
<script>
const COLOR_ANY_ISLAND = "#888";
const COLOR_ROBOT_CORNER_ISLAND = "#fff";
const COLOR_ROBOT_RECT = "#ddd";

const MARKER_COLOR_HEX = "e54c3e";
const MARKER_RGB = hex2rgb(MARKER_COLOR_HEX);
const MARKER_HSV = rgb2hsv(MARKER_RGB[0], MARKER_RGB[1], MARKER_RGB[2]);

const MARKER_MIN_PIXELS = 10;

const HUE_TOLERANCE = 15;
const SATURATION_TOLERANCE = 0.2;
const VALUE_TOLERANCE = 0.5;

const MILLIS = {
	width: 84,
	length: 143,
	shortMarker: 20,
	longMarker: 36,
	wheelOffset: 23
};

const MARKERS = {
	frontLeft: {x: (MILLIS.longMarker - MILLIS.width)/2, y: MILLIS.length - 3/2*MILLIS.shortMarker - MILLIS.wheelOffset},
	frontRight: {x: (MILLIS.width - MILLIS.shortMarker)/2, y: MILLIS.length - MILLIS.longMarker/2 - MILLIS.wheelOffset},
	backLeft: {x: (MILLIS.shortMarker - MILLIS.width)/2, y: MILLIS.longMarker/2 - MILLIS.wheelOffset},
	backRight: {x: (MILLIS.width - MILLIS.shortMarker)/2, y: MILLIS.longMarker/2 - MILLIS.wheelOffset}
};

const COORDS = {
	front: MILLIS.length - MILLIS.wheelOffset,
	back: -MILLIS.wheelOffset,
	left: -MILLIS.width/2,
	right: MILLIS.width/2
};

const WHEEL_SERVICE = getWheelService();

var stream;
var video;
var snapshotCanvas;
var renderCanvas;
var snapshotCtx;
var renderCtx;
var w; // width
var h; // height
var islands;
var transforms;

function getWheelService() {
	const standalone = false;
	if(standalone) {
		var key = "pibot-wheels";
		var url = localStorage.getItem(key) || "https://.../wheels";
		url = window.prompt("Enter the wheel control base URL", url) || url;
		localStorage.setItem(key, url);
		return url;
	} else {
		return "wheels";
	}
}

function load() {
	navigator.getUserMedia({video:{ facingMode: "environment" }}, showStream, handleError);
}

function showStream(s) {
	stream = s;

	video = document.getElementById("camVideo");

	video.srcObject = s;
	video.onloadedmetadata = handleVideoLoaded;
}

function handleVideoLoaded() {
	console.log("Loaded");

	video.play();

	snapshotCanvas = document.getElementById("snapshotCanvas");
	renderCanvas = document.getElementById("renderCanvas");
	renderCanvas.width = snapshotCanvas.width = w = video.offsetWidth;
	renderCanvas.height = snapshotCanvas.height = h = video.offsetHeight;

	snapshotCtx = snapshotCanvas.getContext("2d");
	renderCtx = renderCanvas.getContext("2d");

	requestAnimationFrame(capture);
}

function capture() {
	console.log("capture");
	document.body.classList.remove("fullsize");

	video.pause();
	snapshotCtx.drawImage(video, 0, 0);
	video.play();

	find();

	document.body.classList.add("fullsize");
	requestAnimationFrame(capture);
}

function find() {
	var imgData = snapshotCtx.getImageData(0, 0, w, h);
	var data = imgData.data;

	findMarkerPixels(data);
	findMarkerIslands(data);
	findRobot();
	drawIslands();
	drawRobot();
}

function findMarkerPixels(data) {
	var i = 0;
	for(var y=0; y<h; y++) {
		for(var x=0; x<w; x++) {
			var hsv = rgb2hsv(data[i], data[i+1], data[i+2]);
			var match = isSimilarHSV(MARKER_HSV, hsv);
			var value = match ? 0 : 255;

			data[i] = data[i+1] = data[i+2] = value;
			data[i+3] = 255;
			i += 4;
		}
	}
}

function hex2rgb(hex) {
	return [parseInt("0x"+hex.substring(0,2)), parseInt("0x"+hex.substring(2,4)), parseInt("0x"+hex.substring(4,6))];
}

function rgb2hsv(r,g,b) {
	var max = Math.max(r,g,b);
	var min = Math.min(r,g,b);
	var delta = max - min;

	var hue;
	if(delta == 0) {
		hue = 0;
	} else if(max == r) {
		hue = 60 * ((g - b) / delta);
	} else if(max == g) {
		hue = 60 * ((b - r) / delta + 2);
	} else {
		hue = 60 * ((r - g) / delta + 4);
	}
	if(hue < 0) {
		hue += 360;
	}

	var sat = max==0 ? 0 : delta / max;
	var value = max/256;
	return {h:hue, s:sat, v:value};
}

function isSimilarHSV(hsv1, hsv2) {
	var deltaHue = Math.abs(hsv1.h - hsv2.h);
	if(deltaHue > 180) {
		deltaHue = 360 - deltaHue;
	}
	var deltaSat = Math.abs(hsv1.s - hsv2.s);
	var deltaValue = Math.abs(hsv1.v - hsv2.v);

	return deltaHue <= HUE_TOLERANCE && deltaSat <= SATURATION_TOLERANCE && deltaValue <= VALUE_TOLERANCE;
}

function findMarkerIslands(data) {
	islands = [];
	var i = 0;
	for(var y=0; y<h; y++) {
		for(var x=0; x<w; x++) {
			if(data[i] < 255) {
				var island = floodFillGetIsland(data, x, y);
				if(island.points.length >= MARKER_MIN_PIXELS) {
					islands.push(island);
				}
			}
			i += 4;
		}
	}
}

function floodFillGetIsland(data, startX, startY) {
	var sumX = 0;
	var sumY = 0;
	var island = {minX:startX, minY:startY, maxX:startX, maxY:startY, points:[]};
	var next = [{x:startX, y:startY}];

	while(next.length > 0) {
		var curr = next.pop();
		x = curr.x;
		y = curr.y;

		var i = (y * w + x) * 4;
		if(x<0 || y<0 || x>=w || y>=h || data[i] >= 255) {
			continue;
		}
		data[i] = 255;

		sumX += x;
		sumY += y;
		island.minX = Math.min(island.minX, x);
		island.minY = Math.min(island.minY, y);
		island.maxX = Math.max(island.maxX, x);
		island.maxY = Math.max(island.maxY, y);
		island.points.push(curr);

		next.push({x:x+1, y:y});
		next.push({x:x-1, y:y});
		next.push({x:x, y:y-1});
		next.push({x:x, y:y+1});
	}

	island.x = sumX / island.points.length;
	island.y = sumY / island.points.length;
	island.color = COLOR_ANY_ISLAND;

	return island;
}

function findRobot() {
	transforms = null;

	islands.sort(byPointCountDesc);
	if(islands.length >= 4) {
		var circle = findClockWiseCircle(islands[0], islands[1], islands[2], islands[3]);
		if(circle) {
			circle[0].name = "FL"; // front-left
			circle[1].name = "FR"; // front-right
			circle[2].name = "BR"; // back-right
			circle[3].name = "BL"; // back-left
			circle[0].color = circle[1].color = circle[2].color = circle[3].color = COLOR_ROBOT_CORNER_ISLAND;
			transforms = buildTransforms(circle);
		}
	}
}

function byPointCountDesc(a,b) {
	return b.points.length - a.points.length;
}

function findClockWiseCircle(a, b, c, d) {
	var perms = [[a,b,c,d], [a,b,d,c], [a,c,b,d], [a,c,d,b], [a,d,b,c], [a,d,c,b]];
	return perms.filter(isClockWiseCircle)[0];
}

function isClockWiseCircle(perm) {
	for(var i=0; i<perm.length; i++) {
		if(!isClockWise(perm[i], perm[(i+1) % perm.length], perm[(i+2) % perm.length])) {
			return false;
		}
	}
	return true;
}

function isClockWise(a, b, c) {
	// Scalar product with orthogonal vector
	var a2b = {x:b.x-a.x, y:b.y-a.y};
	var b2c = {x:c.x-b.x, y:c.y-b.y};
	var b2cOrth = {x:b2c.y, y:-b2c.x};
	return a2b.x * b2cOrth.x + a2b.y * b2cOrth.y > 0;
}

function buildTransforms(markerCircle) {
	// Many thanks https://stackoverflow.com/questions/35819142/calculate-a-2d-homogeneous-perspective-transformation-matrix-from-4-points-in-ma

	var p1 = markerCircle[0];
	var p2 = markerCircle[1];
	var p3 = markerCircle[2];
	var p4 = markerCircle[3];

	var t1 = MARKERS.frontLeft;
	var t2 = MARKERS.frontRight;
	var t3 = MARKERS.backRight;
	var t4 = MARKERS.backLeft;

	function serveMatrix(array) {
		return function(y,x) {
			return array[y-1][x-1];
		};
	}

	var B = serveMatrix([[p1.x, p2.x, p3.x, p4.x], [p1.y, p2.y, p3.y, p4.y], [1,1,1,1] ]);
	var A = serveMatrix([[t1.x, t2.x, t3.x, t4.x], [t1.y, t2.y, t3.y, t4.y], [1,1,1,1] ]);

	var M = numeric.solve(
		[
			[A(1, 1), A(2, 1), A(3, 1), 0, 0, 0, 0, 0, 0, -B(1, 1), 0, 0, 0], 
			[0, 0, 0, A(1, 1), A(2, 1), A(3, 1), 0, 0, 0, -B(2, 1), 0, 0, 0], 
			[0, 0, 0, 0, 0, 0, A(1, 1), A(2, 1), A(3, 1), -B(3, 1), 0, 0, 0], 
			[A(1, 2), A(2, 2), A(3, 2), 0, 0, 0, 0, 0, 0, 0, -B(1, 2), 0, 0], 
			[0, 0, 0, A(1, 2), A(2, 2), A(3, 2), 0, 0, 0, 0, -B(2, 2), 0, 0], 
			[0, 0, 0, 0, 0, 0, A(1, 2), A(2, 2), A(3, 2), 0, -B(3, 2), 0, 0], 
			[A(1, 3), A(2, 3), A(3, 3), 0, 0, 0, 0, 0, 0, 0, 0, -B(1, 3), 0], 
			[0, 0, 0, A(1, 3), A(2, 3), A(3, 3), 0, 0, 0, 0, 0, -B(2, 3), 0], 
			[0, 0, 0, 0, 0, 0, A(1, 3), A(2, 3), A(3, 3), 0, 0, -B(3, 3), 0], 
			[A(1, 4), A(2, 4), A(3, 4), 0, 0, 0, 0, 0, 0, 0, 0, 0, -B(1, 4)], 
			[0, 0, 0, A(1, 4), A(2, 4), A(3, 4), 0, 0, 0, 0, 0, 0, -B(2, 4)], 
			[0, 0, 0, 0, 0, 0, A(1, 4), A(2, 4), A(3, 4), 0, 0, 0, -B(3, 4)], 
			[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
		], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
	);

	var coords2image = [
		[M[0], M[1], M[2]],
		[M[3], M[4], M[5]],
		[M[6], M[7], M[8]]
	];
	var image2coords = numeric.inv(coords2image);

	function serveTransform(mat) {
		return function(cx,cy) {
			var res = numeric.dot(mat, [cx, cy, 1]);
			return {x: res[0]/res[2], y: res[1]/res[2]};
		};
	}

	return {coords2image: serveTransform(coords2image), image2coords: serveTransform(image2coords)};
}

function drawIslands() {
	renderCtx.clearRect(0, 0, w, h);

	// Draw marker island pixels with pulsing alpha
	var alpha = Math.floor(180 * (Math.sin( new Date().getTime() / 1500 *2*Math.PI )+1)/2);
	islands.forEach(function(island) {
		var iWidth = island.maxX - island.minX + 1;
		var iHeight = island.maxY - island.minY + 1;
		var pixelData = renderCtx.getImageData(island.minX, island.minY, iWidth, iHeight);
		var pixels = pixelData.data;
		island.points.forEach(function(p) {
			var i = ((p.x - island.minX) + (p.y - island.minY)*iWidth) * 4;
			pixels[i] = pixels[i+1] = pixels[i+2] = 0;
			pixels[i+3] = alpha;
		});
		renderCtx.putImageData(pixelData, island.minX, island.minY);
	});

	islands.forEach(function(island) {
		var x = island.x;
		var y = island.y;

		// Draw cross at middle of island
		renderCtx.strokeStyle = island.color;
		renderCtx.lineWidth = 2;
		var markerSize = 10;

		renderCtx.beginPath();
		renderCtx.moveTo(x - markerSize, y);
		renderCtx.lineTo(x + markerSize, y);
		renderCtx.stroke();

		renderCtx.beginPath();
		renderCtx.moveTo(x, y - markerSize);
		renderCtx.lineTo(x, y + markerSize);
		renderCtx.stroke();

		// Draw marker island name
		if(island.name) {
			renderCtx.lineWidth = 1;
			renderCtx.font = "12pt monospace";
			renderCtx.strokeText(island.name, x+2, y-2);
		}
	});
}

function drawRobot() {
	if(transforms) {
		renderCtx.strokeStyle = COLOR_ROBOT_RECT;
		renderCtx.lineWidth = 2;

		var f = transforms.coords2image;

		// Draw robot frame
		var frontLeft = f(COORDS.left, COORDS.front);
		var frontRight = f(COORDS.right, COORDS.front);
		var backLeft = f(COORDS.left, COORDS.back);
		var backRight = f(COORDS.right, COORDS.back);

		renderCtx.beginPath();
		renderCtx.moveTo(frontLeft.x, frontLeft.y);
		renderCtx.lineTo(frontRight.x, frontRight.y);
		renderCtx.lineTo(backRight.x, backRight.y);
		renderCtx.lineTo(backLeft.x, backLeft.y);
		renderCtx.lineTo(frontLeft.x, frontLeft.y);
		renderCtx.stroke();

		// Draw robot spike
		var head = f(0, COORDS.front);
		var forward = f(0, COORDS.front + 50);

		renderCtx.beginPath();
		renderCtx.moveTo(head.x, head.y);
		renderCtx.lineTo(forward.x, forward.y);
		renderCtx.stroke();
	}
}

function handleClick(event, el) {
	var fx = event.clientX / el.offsetWidth;
	var fy = event.clientY / el.offsetHeight;

	var x = Math.floor(fx * w);
	var y = Math.floor(fy * h);

	move(x, y);
}

function move(x, y) {
	if(transforms) {
		var target = transforms.image2coords(x, y);

		var distance = Math.sqrt(target.x*target.x + target.y*target.y);
		var angle = Math.atan2(target.x, target.y);

		var angleDeg = 180 * angle / Math.PI;

		var str = 
			"dx: "+Math.round(target.x)+"\n"+
			"dy: "+Math.round(target.y)+"\n"+
			"dist: "+Math.round(distance)+"\n"+
			"angle: "+Math.round(angleDeg)+"°";

		console.log(str);

		scheduleCommand("clear move "+Math.round(target.x)+" "+Math.round(target.y));
	}
}

function scheduleCommand(command) {
	var url = WHEEL_SERVICE + "?x="+encodeURIComponent(command)+"&t="+new Date().getTime();
	scheduleFetch(url);
}

var fetching = false;
var nextFetchUrl = null;
function scheduleFetch(url) {
	if(fetching) {
		nextFetchUrl = url;
	} else {
		fetching = true;
		fetch(url).then(fetchReady, fetchReady);
	}
}

function fetchReady() {
	fetching = false;
	if(nextFetchUrl != null) {
		var url = nextFetchUrl;
		nextFetchUrl = null;
		scheduleFetch(url);
	}
}

function handleError() {
	alert("Failed to request the camera video.");
}
</script>
<style>
video, canvas {
	position: absolute;
	left: 0;
	top: 0;
}

.fullsize video, .fullsize canvas {
	width: 100%;
}
</style>
</head>
<body onload="load()">
	<video id="camVideo"></video>
	<canvas id="snapshotCanvas"></canvas>
	<canvas id="renderCanvas" onclick="handleClick(event, this)"></canvas>
</body>
</html>